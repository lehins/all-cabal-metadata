homepage: https://github.com/barischj/threepenny-gui-flexbox
changelog-type: ''
hash: ecb9c4d26ecc8c3fd407d76fbe0dda4be737b10db3756101bf93b9c5fd0c188c
test-bench-deps: {}
maintainer: barischj@tcd.ie
synopsis: Flexbox layouts for Threepenny-gui.
changelog: ''
basic-deps:
  clay: -any
  base: ! '>=4.7 && <5'
  text: -any
  threepenny-gui-flexbox: -any
  threepenny-gui: -any
all-versions:
- '0.2.0.0'
- '0.2.0.1'
- '0.2.0.2'
- '0.3'
- '0.3.0.1'
author: Jeremy Barisch-Rooney
latest: '0.3.0.1'
description-type: text
description: ! "* Threepenny-gui Flexbox [[https://travis-ci.org/barischj/threepenny-gui-flexbox.svg?branch=master]]\n
  \ [[https://img.shields.io/hackage/v/threepenny-gui-flexbox.svg]]\n  [[https://www.stackage.org/package/threepenny-gui-flexbox/badge/nightly]]\n\n
  \ Flexbox layouts for Threepenny-gui.\n\n  This library was written following the
  wonderful\n  [[https://css-tricks.com/snippets/css/a-guide-to-flexbox][A Complete
  Guide to\n  Flexbox]] and using the wonderful\n  [[https://hackage.haskell.org/package/clay][Clay]]
  library as a CSS DSL.\n\n   [[./example.png]]\n\n* Usage\n\n  This library exposes
  the entire Flexbox API.\n\n  We collect the Flexbox properties that apply to the
  parent element, things\n  like ~flex-direction~, in a ~ParentProps~ data type.\n\n
  \ We collect the Flexbox properties that apply to children elements, things like\n
  \ ~flex-grow~, in a ~ChildProps~ data type.\n\n** Setting Properties\n\n  You can
  set a property by using the defaults and over-riding a specific entry\n  using record
  syntax:\n  \n  *Setting flex-grow: 2;*\n  #+BEGIN_SRC Haskell\n  childProps { cFlexGrow
  = 2 }\n  #+END_SRC\n  \n  You can use the Clay CSS DSL to set values:\n  \n  *Setting
  display: inline-flex;*\n  #+BEGIN_SRC Haskell\n  parentProps { pDisplay = Clay.Flexbox.inlineFlex
  }\n  #+END_SRC\n\n** Example\n\n  What you'll propbably use a lot is ~flexbox~,
  which you pass a parent\n  element and properties, and a list of children elements
  and their respective\n  properties.\n\n  The example image above was produced with
  the below code. It attaches three\n  ~div~ s with text \"foo\" to the ~body~ in
  the ratio 1:2:1. The example can be\n  run with ~stack exec threepenny-flexbox-exe~.\n
  \ \n  #+BEGIN_SRC Haskell\n  -- |Example of three divs using a flex-grow ratio of
  1:2:1.\n  example :: Window -> UI ()\n  example w = void $\n    flexbox (getBody
  w) parentProps $ [grow 1, grow 2, grow 1]\n\n  -- |Example \"foo\" div and given
  flex-grow value.\n  grow :: Int -> (UI Element, ChildProps)\n  grow n = (foo, childProps
  { cFlexGrow = n })\n    where foo = UI.div # set UI.text \"foo\"\n                       #
  set UI.style [(\"background-color\", \"#F89406\"),\n                                       (\"margin\",
  \"8px\")]\n  #+END_SRC\n"
license-name: BSD3
